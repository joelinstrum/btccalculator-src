{"version":3,"sources":["components/elements/CryptoCalculator/CryptoList.js","components/elements/CryptoCalculator/CryptoCalculator.js","containers/home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["CryptoList","click","useState","eth","setETH","btc","setBTC","bch","setBCH","ltc","setLTC","bnb","setBNB","useEffect","fetch","then","response","json","data","ETH","USD","BTC","BCH","LTC","BNB","className","onClick","CryptoCalculator","closeable","id","closeClick","costPerCoin","setCostPerCoin","totalInvestment","setTotalInvestment","futureCost","setFutureCost","numberOfCoins","setNumberOfCoins","totalReturn","setTotalReturn","profit","setProfit","formattedReturn","setFormattedReturn","formattedProfit","setFormattedProfit","showDropdown","setDropdown","crypto","setCrypto","n","costPerCoinStr","toString","parseFloat","replace","toFixed","returnValue","Intl","NumberFormat","style","currency","format","formatted","type","placeholder","onChange","e","target","value","price","cryptoType","initialCalculatorList","Home","childCalculators","setChildCalculators","filtered","filter","item","map","length","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dfcc52d.chunk.js","sourcesContent":["import React, {useEffect, useState } from 'react';\n\nconst CryptoList = ({click}) => {\n\n  const [eth, setETH] = useState('...');\n  const [btc, setBTC] = useState('...');\n  const [bch, setBCH] = useState('...');\n  const [ltc, setLTC] = useState('...');\n  const [bnb, setBNB] = useState('...');\n\n  useEffect( () => {\n    const endpoint = `https://min-api.cryptocompare.com/data/pricemulti?fsyms=ETH,BTC,BCH,LTC,BNB&tsyms=USD&extraParams=CryptoCalculator`;\n    const headers = {\n      \"Content-Type\": \"application-json\"\n    }\n    fetch(endpoint, headers)\n      .then( response => response.json())\n      .then( data => {\n        setETH(data.ETH.USD);\n        setBTC(data.BTC.USD);\n        setBCH(data.BCH.USD);\n        setLTC(data.LTC.USD);\n        setBNB(data.BNB.USD);\n      })\n  }, []);\n\n  return (<div className=\"dropdown-list\">\n            <ul>\n              <li onClick={() => click(btc, 'Bitcoin')}>Bitcoin: { btc }</li>\n              <li onClick={() => click(eth, 'Ethereum')}>Ethereum: { eth }</li>\n              <li onClick={() => click(bch, 'Bitcoin Cash')}>Bitcoin cash: { bch }</li>\n              <li onClick={() => click(ltc, 'Litecoin')}>Litecoin: { ltc }</li>\n              <li onClick={() => click(bnb), 'Binance'}>Binance: {bnb}</li>\n            </ul>\n          </div>)\n}\n\nexport default CryptoList;","import React, { useState, useEffect } from 'react';\nimport CryptoList from './CryptoList';\n\nconst CryptoCalculator = ({ closeable, id, closeClick }) => {\n\n  const [costPerCoin, setCostPerCoin ] = useState(0);\n  const [totalInvestment, setTotalInvestment] = useState(0);\n  const [futureCost, setFutureCost ] = useState(0);\n  const [numberOfCoins, setNumberOfCoins ] = useState(0)\n  const [totalReturn, setTotalReturn] = useState(0);\n  const [profit, setProfit ] = useState(0);\n  const [formattedReturn, setFormattedReturn] = useState();\n  const [formattedProfit, setFormattedProfit] = useState();\n  const [showDropdown, setDropdown] = useState();\n  const [crypto, setCrypto] = useState('Crypto');\n\n  useEffect( () => {\n    let n;\n    if(costPerCoin && totalInvestment) {\n      let costPerCoinStr = costPerCoin.toString();\n      n = parseFloat(totalInvestment.replace(/[^0-9.]/g, '')/costPerCoinStr.replace(/[^0-9.]/g , '')).toFixed(6);\n      setNumberOfCoins(n)\n    }\n    \n  }, [costPerCoin, totalInvestment])\n\n  useEffect( () => {\n    if(costPerCoin && totalInvestment && futureCost){\n      const returnValue = parseFloat(numberOfCoins.replace(/[^0-9.]/, '') * futureCost.replace(/[^0-9.]/g, '')).toFixed(2);\n      setTotalReturn(returnValue)\n    } else if(costPerCoin && totalInvestment){\n      setTotalReturn(totalInvestment.replace(/[^0-9.]/g, ''));\n    } else {\n      setTotalReturn(0);\n    }\n  }, [costPerCoin, totalInvestment, futureCost, numberOfCoins])\n\n  useEffect( () => {\n    if(futureCost && totalInvestment && totalReturn){\n      const returnValue = parseFloat(totalReturn.replace(/[^0-9.]/g, '') - totalInvestment.replace(/[^0-9.]/g, '')).toFixed(2);\n      setProfit(returnValue);\n    } else {\n      setProfit(0)\n    }\n  }, [totalReturn, totalInvestment, futureCost])\n\n  useEffect( () => {\n    if(totalReturn) {\n      setFormattedReturn(new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(totalReturn.replace(/[^0-9.]/, '')));\n    }\n    if(profit){\n      let formatted =  new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(profit.replace(/[^0-9.-]/, ''));\n      if(profit < 0){\n        setFormattedProfit(`-${formatted.replace(/-/, '')}`);\n      } else {\n        setFormattedProfit(`${formatted}`);\n      }\n    }  \n  }, [totalReturn, profit]);\n\n  useEffect( () => {\n\n  }, [showDropdown]);\n\n  const onClickCurrent = (price, cryptoType) => {\n    setCostPerCoin(price);\n    setCrypto(cryptoType)\n    setDropdown(!showDropdown);\n  }\n\n\n  return (\n    <div className=\"flex-row\">\n      <div className=\"card-container card-1\">\n      { closeable && (\n                      <div className=\"close\" onClick={ () => closeClick(id)}>\n                        <div className=\"close-x\">x</div>\n                      </div>\n        ) }\n\n      <div className=\"flex-row div-spacing-10\">\n          <div className=\"left-label\">Crypto: </div>\n          <div>\n            <input \n              type=\"text\" \n              placeholder=\"optional\"\n              onChange={ e => setCrypto(e.target.value)}\n              value={crypto}\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex-row div-spacing-10\">\n          <div className=\"left-label\">Current price: </div>\n          <div className=\"input-container\">\n            <input \n              type=\"text\" \n              placeholder=\"cost per coin\" \n              onChange={ e => setCostPerCoin(e.target.value)}  \n              value={ costPerCoin }\n            />\n            <div className=\"arrow-container\" onClick={ () => setDropdown(!showDropdown)}>\n              <span>&#9662;</span>\n            </div>\n            { showDropdown && <CryptoList click={ onClickCurrent }/> }\n          </div>\n        </div>\n\n        <div className=\"flex-row div-spacing-10\">\n          <div className=\"left-label\">Total Investment: </div>\n          <div>\n            <input \n              type=\"text\" \n              placeholder=\"ie 25000\"\n              onChange={ e => setTotalInvestment(e.target.value)}\n            />\n          </div>\n        </div>\n\n        <div className=\"flex-row div-spacing-10\">\n          <div className=\"left-label\">Expected future price/coin: </div>\n          <div>\n            <input \n              type=\"text\" \n              placeholder=\"ie 10000\" \n              onChange={ e => setFutureCost(e.target.value)}\n            />\n          </div>\n        </div>\n\n      </div>\n      <div className=\"card-container card-2\">\n        <div>\n          <span  className=\"title-medium-label\">ROI:&nbsp;</span>\n          <span className=\"title-medium-value\">{crypto}</span>\n        </div>  \n        <div>Number of coins: <span className=\"span-100 result-1\">{ numberOfCoins }</span></div>\n        <div>Total Return: <span className=\"span-100 result-1\">{ totalReturn && `${formattedReturn}`}</span></div>\n        <div>Profit: <span className=\"span-100 result-2\">{ profit && `${formattedProfit}`}</span></div>\n      </div>\n    </div>\n    )\n}\n\nexport default CryptoCalculator;","import React, {useState } from 'react';\nimport { CryptoCalculator } from '../../components/elements/CryptoCalculator';\n\nconst initialCalculatorList = [];\n\nconst Home = () => {\n  const [childCalculators, setChildCalculators] = useState(initialCalculatorList);\n\n  const closeClick = (id) => {\n    const filtered = childCalculators.filter( item => item.id !== id);\n    setChildCalculators(filtered)\n  }\n\n  return (<div>\n            <div className=\"title-large\">Crypto ROI Calculator</div>\n            <CryptoCalculator />\n            {\n              childCalculators.map((item, n) => <CryptoCalculator \n                                                  key={n} \n                                                  closeable={true} \n                                                  id={n} \n                                                  closeClick={closeClick} \n                                                />)\n            }\n            <button onClick={ () => {\n              setChildCalculators(childCalculators => [...childCalculators, {id:childCalculators.length }])\n            }}>Compare +</button>\n          </div>)\n}\n\nexport default Home;","import { Home } from './containers/home';\nimport \"./css/general.scss\";\n\nfunction App() {\n  return (\n    <div className=\"body-centered\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}